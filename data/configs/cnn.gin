# uncomment to use image state, all following parameters are only relevant if enabled
TrainLoop.image_gen=@ImageGenerator()

ImageGenerator.img_width_px=256
ImageGenerator.address_space=16
ImageGenerator.hhh_squash_threshold=-1
ImageGenerator.max_pixel_value=1

cnn_256=(
     (
         [8, 16, 32],             # conv filters
         [(2, 4), (2, 4), (3, 3)], # conv kernel sizes
         [(1, 2), (1, 1), 3]       # conv strides
     ),
    (
         [(1, 2), (1, 2), 3], # pool sizes
         [(1, 2), (1, 2), 2]  # pool strides
    ),
    [64], # fc units after flatten
    1 # start pooling layers at idx 1
)

# 24824 trainable parameters
cnn_256_cropped=((
                       [8, 16, 32],  # conv filters
                       [(2, 4), (2, 4), (1, 2)],  # conv kernel sizes
                       [(1, 2), (1, 2), (1, 2)]  # conv strides
                   ),
                   (
                       [(1, 2), (1, 2), (2, 2)],  # pool sizes
                       [(1, 2), (1, 2), 2]  # pool strides
                   ),
                   [64, 64],  # fc units after flatten
                   1
)

cnn_512=(
     (
         [8, 16, 32],             # conv filters
         [(2, 4), (2, 4), (3, 3)], # conv kernel sizes
         [(1, 2), (1, 2), 3]       # conv strides
     ),
    (
         [(1, 2), (1, 2), 3], # pool sizes
         [(1, 2), (1, 2), 2]  # pool strides
    ),
    [64], # fc units after flatten
    1 # start pooling layers at idx 1
)

# CNN256 Config
#[
#    # 17,256,2
#    tf.keras.layers.Conv2D(8, (2, 4), activation=tf.keras.activations.relu, strides=(1, 2)),
#    # 16,127,8
#    tf.keras.layers.MaxPool2D(pool_size=(1, 2), strides=(1, 2)),
#    # 16,63,8
#    tf.keras.layers.Conv2D(16, (2, 4), activation=tf.keras.activations.relu, strides=(1, 1)),
#    # 15,60,16
#    tf.keras.layers.MaxPool2D(pool_size=(1, 2), strides=(1, 2)),
#    # 15,30,16
#    tf.keras.layers.Conv2D(32, (3, 3), activation=tf.keras.activations.relu, strides=3),
#    # 5,10,32
#    tf.keras.layers.MaxPool2D(pool_size=3, strides=2),
#    # 2,4,32
#    tf.keras.layers.Flatten(),
#    # 1,256
#    tf.keras.layers.Dense(64, activation=tf.keras.activations.relu)
#    # 1,64
#]
